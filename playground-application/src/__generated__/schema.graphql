type App implements Node {
  currentBundle: Bundle!
  customHost: CustomHost!
  id: ID!
  manifest: AppManifest!
  version: Int!
}

type AppManifest {
  icon: URL!
  name: String!
}

union Bundle = BundleTemplate | BundleUpload

type BundleTemplate implements Node {
  id: ID!
}

type BundleUpload implements Node {
  id: ID!
}

input CreateAppInput {
  appId: String!
  name: String!
  userProfileId: ID!
}

type CreateAppResult {
  app: App!
  customHost: CustomHost!
  userProfile: UserProfile!
}

input CreateUserProfileInput {
  _: String
}

type CreateUserProfileResult {
  createApp(input: CreateUserProfileResultCreateAppInput!): CreateUserProfileResultCreateAppResult!
  userProfile: UserProfile!
}

input CreateUserProfileResultCreateAppInput {
  appId: String!
  name: String!
}

type CreateUserProfileResultCreateAppResult {
  app: App!
  customHost: CustomHost!
  userProfile: UserProfile!
}

type CustomHost implements Node {
  id: ID!
  providerInfo: HostnameProviderInfo
}

type HostnameProviderInfo {
  healthCheckUrl: URL!
  hostname: String!
  managementUrl: URL!
  url: URL!
}

type Mutation {
  createApp(input: CreateAppInput!): CreateAppResult!
  createUserProfile(input: CreateUserProfileInput! = {}): CreateUserProfileResult!
}

interface Node {
  id: ID!
}

type Query {
  node(id: ID!): Node
  userProfile(id: ID!): UserProfile
}

scalar URL

type UserProfile implements Node {
  apps: [App!]!
  id: ID!
  name: String!
  profileImageUrl: URL!
}